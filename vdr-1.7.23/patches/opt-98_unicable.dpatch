#! /bin/sh /usr/share/dpatch/dpatch-run
## opt-98_unicable.dpatch by  <myneumann@privat.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -uNr vdr-1.7.19/diseqc.c vdr-1.7.19-patched/diseqc.c
--- vdr-1.7.19/diseqc.c	2011-06-20 11:45:14.000000000 +0200
+++ vdr-1.7.19-patched/diseqc.c	2011-06-20 12:10:44.000000000 +0200
@@ -24,6 +24,7 @@
   commands = NULL;
   parsing = false;
   numCodes = 0;
+  unicable = -1;
 }
 
 cDiseqc::~cDiseqc()
@@ -93,17 +94,18 @@
 {
   const char *e = strchr(s, ']');
   if (e) {
-     int NumCodes = 0;
+     int num = 0;
      const char *t = s;
      char *p;
      while (t < e) {
-           if (NumCodes < MaxDiseqcCodes) {
+           if (num < MaxDiseqcCodes) {
               errno = 0;
               int n = strtol(t, &p, 16);
               if (!errno && p != t && 0 <= n && n <= 255) {
                  if (parsing) {
-                    codes[NumCodes++] = uchar(n);
-                    numCodes = NumCodes;
+                    if (parsing)
+                      codes[num] = uchar(n);
+                    ++num;
                     }
                  t = skipspace(p);
                  }
@@ -117,6 +119,8 @@
               return NULL;
               }
            }
+     if (parsing)
+       numCodes = num;
      return e + 1;
      }
   else
@@ -124,6 +128,46 @@
   return NULL;
 }
 
+char *cDiseqc::Unicable(char *s)
+{
+  char *p = NULL;
+  errno = 0;
+  int n = strtol(s, &p, 10);
+  if (!errno && p != s && n >= 0 && n < 8) {
+     if (parsing)
+        unicable = n;
+     return p;
+     }
+  esyslog("ERROR: invalid unicable sat in '%s'", s - 1);
+  return NULL;
+}
+
+unsigned int cDiseqc::UnicableFreq(unsigned int frequency, int satcr, unsigned int bpf)
+{
+  unsigned int t = frequency == 0 ? 0 : (frequency + bpf + 2) / 4 - 350;
+  if (t < 1024 && satcr >= 0 && satcr < 8)
+  {
+    codes[3] = t >> 8 | (t == 0 ? 0 : unicable << 2) | satcr << 5;
+    codes[4] = t;
+    return (t + 350) * 4 - frequency;
+  }
+  
+  return 0;
+}
+
+void cDiseqc::UnicablePin(int pin)
+{
+  if (pin >= 0 && pin <= 255) {
+    numCodes = 6;
+    codes[2] = 0x5c;
+    codes[5] = pin;
+    }
+  else {
+    numCodes = 5;
+    codes[2] = 0x5a;
+    }
+}
+
 cDiseqc::eDiseqcActions cDiseqc::Execute(const char **CurrentAction) const
 {
   if (!*CurrentAction)
@@ -139,6 +183,7 @@
           case 'B': return daMiniB;
           case 'W': *CurrentAction = Wait(*CurrentAction); break;
           case '[': *CurrentAction = Codes(*CurrentAction); return *CurrentAction ? daCodes : daNone;
+          case 'U': *CurrentAction = Unicable(*CurrentAction); return *CurrentAction ? daUnicable : daNone;
           default: return daNone;
           }
         }
@@ -164,3 +209,46 @@
       }
   return NULL;
 }
+
+// --- cUnicable --------------------------------------------------------------
+
+cUnicable::cUnicable()
+{
+  satcr = -1;
+  bpf = 0;
+  pin = -1;
+  unused = true;
+}
+
+bool cUnicable::Parse(const char *s)
+{
+  bool result = false;
+  int fields = sscanf(s, "%d %u %d", &satcr, &bpf, &pin);
+  if (fields >= 2) {
+     if (satcr >= 0 && satcr < 8)
+        result = true;
+     else
+        esyslog("Error: invalid unicable channel '%d'", satcr);
+     if (result && fields == 3 && (pin < 0 || pin > 255)) {
+        esyslog("Error: invalid unicable pin '%d'", pin);
+        result = false;
+        }
+     }
+  return result;
+}
+
+
+// --- cUnicables --------------------------------------------------------------
+
+cUnicables Unicables;
+
+cUnicable *cUnicables::GetUnused()
+{
+  for (cUnicable *p = First(); p; p = Next(p)) {
+      if (p->Unused()) {
+        p->Use();
+        return p;
+        }
+      }
+  return NULL;
+}
diff -uNr vdr-1.7.19/diseqc.conf vdr-1.7.19-patched/diseqc.conf
--- vdr-1.7.19/diseqc.conf	2011-06-20 11:45:14.000000000 +0200
+++ vdr-1.7.19-patched/diseqc.conf	2011-06-20 11:45:34.000000000 +0200
@@ -18,6 +18,7 @@
 #   V         voltage high (18V)
 #   A         mini A
 #   B         mini B
+#   Un        unicable code sequence for bank n follows
 #   Wnn       wait nn milliseconds (nn may be any positive integer number)
 #   [xx ...]  hex code sequence (max. 6)
 #
@@ -75,3 +76,16 @@
 # S19.2E  99999 H 10560 t v
 # S19.2E  12110 V 11080 t v
 # S19.2E  99999 V 10720 t v
+#
+# Unicable
+#
+# S19.2E  11700 V  9750  t v U0 W10 [E0 10 5A 00 00] W10 v
+# S19.2E  99999 V 10600  t v U1 W10 [E0 10 5A 00 00] W10 v
+# S19.2E  11700 H  9750  t v U2 W10 [E0 10 5A 00 00] W10 v
+# S19.2E  99999 H 10600  t v U3 W10 [E0 10 5A 00 00] W10 v
+#
+# S13.0E  11700 V  9750  t v U4 W10 [E0 10 5A 00 00] W10 v
+# S13.0E  99999 V 10600  t v U5 W10 [E0 10 5A 00 00] W10 v
+# S13.0E  11700 H  9750  t v U6 W10 [E0 10 5A 00 00] W10 v
+# S13.0E  99999 H 10600  t v U7 W10 [E0 10 5A 00 00] W10 v
+
diff -uNr vdr-1.7.19/diseqc.h vdr-1.7.19-patched/diseqc.h
--- vdr-1.7.19/diseqc.h	2011-06-20 11:45:14.000000000 +0200
+++ vdr-1.7.19-patched/diseqc.h	2011-06-20 11:45:34.000000000 +0200
@@ -23,6 +23,7 @@
     daMiniA,
     daMiniB,
     daCodes,
+    daUnicable,
     };
   enum { MaxDiseqcCodes = 6 };
 private:
@@ -32,11 +33,13 @@
   char polarization;
   int lof;
   char *commands;
+  int unicable;
   bool parsing;
   mutable uchar codes[MaxDiseqcCodes];
   mutable int numCodes;
   const char *Wait(const char *s) const;
   const char *Codes(const char *s) const;
+  char *Unicable(char *s);
 public:
   cDiseqc(void);
   ~cDiseqc();
@@ -56,6 +59,9 @@
   int Lof(void) const { return lof; }
   const char *Commands(void) const { return commands; }
   const uchar *Codes(int &NumCodes) const { NumCodes = numCodes; return numCodes ? codes : NULL; }
+  bool Unicable() const { return unicable >= 0; }
+  unsigned int UnicableFreq(unsigned int frequency, int satcr, unsigned int bpf);
+  void UnicablePin(int pin);
   };
 
 class cDiseqcs : public cConfig<cDiseqc> {
@@ -65,4 +71,27 @@
 
 extern cDiseqcs Diseqcs;
 
+class cUnicable : public cListObject {
+private:
+  int satcr;
+  unsigned int bpf;
+  int pin;
+  bool unused;
+public:
+  cUnicable();
+  bool Parse(const char *s);
+  int Satcr() const { return satcr; }
+  unsigned int Bpf() const { return bpf; }
+  int Pin() const { return pin; }
+  bool Unused() const { return unused; }
+  void Use() { unused = false; }
+  };
+
+class cUnicables : public cConfig<cUnicable> {
+public:
+  cUnicable *GetUnused();
+  };
+
+extern cUnicables Unicables;
+
 #endif //__DISEQC_H
diff -uNr vdr-1.7.19/dvbdevice.c vdr-1.7.19-patched/dvbdevice.c
--- vdr-1.7.19/dvbdevice.c	2011-06-20 11:45:14.000000000 +0200
+++ vdr-1.7.19-patched/dvbdevice.c	2011-06-20 11:45:34.000000000 +0200
@@ -269,7 +269,8 @@
   time_t lastTimeoutReport;
   fe_delivery_system frontendType;
   cChannel channel;
-  const char *diseqcCommands;
+  cUnicable *unicable;
+  cDiseqc *diseqcLast;
   eTunerStatus tunerStatus;
   cMutex mutex;
   cCondVar locked;
@@ -277,6 +278,7 @@
   void ClearEventQueue(void) const;
   dvb_diseqc_master_cmd diseqc_cmd;
   bool GetFrontendStatus(fe_status_t &Status) const;
+  void ExecuteDiseqc(cDiseqc *diseqc, unsigned int &frequency);
   bool SetFrontend(void);
   virtual void Action(void);
 public:
@@ -288,6 +290,9 @@
   void Set(const cChannel *Channel);
   bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
   bool Locked(int TimeoutMs = 0);
+  int UnicableSatcr() const { return unicable ? unicable->Satcr() : -1; }
+  int UnicableBpf() const { return unicable ? unicable->Bpf() : 0; }
+  int UnicablePin() const { return unicable ? unicable->Pin() : -1; }
   int GetSignalStrength(void) const;
   int GetSignalQuality(void) const;
   };
@@ -309,10 +314,13 @@
   tuneTimeout = 0;
   lockTimeout = 0;
   lastTimeoutReport = 0;
-  diseqcCommands = NULL;
+  unicable = NULL;
+  diseqcLast = NULL;
   tunerStatus = tsIdle;
-  if (frontendType == SYS_DVBS || frontendType == SYS_DVBS2)
-	if(lnbSendSignals) CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_13)); // must explicitly turn on LNB power   // LNB Sharing
+  if (frontendType == SYS_DVBS || frontendType == SYS_DVBS2) {
+	  if(lnbSendSignals) CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_13)); // must explicitly turn on LNB power   // LNB Sharing
+    unicable = Unicables.GetUnused();
+  }
   SetDescription("tuner on frontend %d/%d", adapter, frontend);
   Start();
 }
@@ -333,6 +341,10 @@
   newSet.Broadcast();
   locked.Broadcast();
   Cancel(3);
+  if (diseqcLast && diseqcLast->Unicable()) {
+    unsigned int frequency = 0;
+    ExecuteDiseqc(diseqcLast, frequency);
+  }
 }
 
 bool cDvbTuner::IsTunedTo(const cChannel *Channel) const
@@ -502,6 +514,43 @@
   return f;
 }
 
+void cDvbTuner::ExecuteDiseqc(cDiseqc *diseqc, unsigned int &frequency)
+{
+  cDiseqc::eDiseqcActions da;
+  for (char *CurrentAction = NULL; (da = diseqc->Execute(&CurrentAction)) != cDiseqc::daNone; ) {
+    switch (da) {
+      case cDiseqc::daNone:      break;
+      case cDiseqc::daToneOff:   CHECK(ioctl(fd_frontend, FE_SET_TONE, SEC_TONE_OFF)); break;
+      case cDiseqc::daToneOn:    CHECK(ioctl(fd_frontend, FE_SET_TONE, SEC_TONE_ON)); break;
+      case cDiseqc::daVoltage13: CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_13)); break;
+      case cDiseqc::daVoltage18: CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_18)); break;
+      case cDiseqc::daMiniA:     CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_BURST, SEC_MINI_A)); break;
+      case cDiseqc::daMiniB:     CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_BURST, SEC_MINI_B)); break;
+      case cDiseqc::daCodes: {
+           int n = 0;
+           uchar *codes = diseqc->Codes(n);
+           if (codes) {
+             struct dvb_diseqc_master_cmd cmd;
+             memcpy(cmd.msg, codes, min(n, int(sizeof(cmd.msg))));
+             cmd.msg_len = n;
+             CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_MASTER_CMD, &cmd));
+             }
+           }
+           break;
+      case cDiseqc::daUnicable: {
+           frequency = diseqc->UnicableFreq(frequency, UnicableSatcr(), UnicableBpf());
+           diseqc->UnicablePin(UnicablePin());
+           if (frequency == 0) {
+             CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_13));
+             esyslog("ERROR: unable to setup unicable frequency for channel %d (f=%u, s=%d, b=%d)", channel.Number(), frequency, UnicableSatcr(), UnicableBpf());
+             }
+           }
+           break; 
+      default: esyslog("ERROR: unknown diseqc command %d", da);
+      }
+    }
+}
+
 bool cDvbTuner::SetFrontend(void)
 {
 #define MAXFRONTENDCMDS 16
@@ -532,35 +581,15 @@
         const cDiseqc *diseqc = Diseqcs.Get(device, channel.Source(), channel.Frequency(), dtp.Polarization());
         if (diseqc) {
            if(lnbSendSignals) {    // LNB sharing
-           if (diseqc->Commands() && (!diseqcCommands || strcmp(diseqcCommands, diseqc->Commands()) != 0)) {
-              cDiseqc::eDiseqcActions da;
-              for (const char *CurrentAction = NULL; (da = diseqc->Execute(&CurrentAction)) != cDiseqc::daNone; ) {
-                  switch (da) {
-                    case cDiseqc::daNone:      break;
-                    case cDiseqc::daToneOff:   CHECK(ioctl(fd_frontend, FE_SET_TONE, SEC_TONE_OFF)); break;
-                    case cDiseqc::daToneOn:    CHECK(ioctl(fd_frontend, FE_SET_TONE, SEC_TONE_ON)); break;
-                    case cDiseqc::daVoltage13: CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_13)); break;
-                    case cDiseqc::daVoltage18: CHECK(ioctl(fd_frontend, FE_SET_VOLTAGE, SEC_VOLTAGE_18)); break;
-                    case cDiseqc::daMiniA:     CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_BURST, SEC_MINI_A)); break;
-                    case cDiseqc::daMiniB:     CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_BURST, SEC_MINI_B)); break;
-                    case cDiseqc::daCodes: {
-                         int n = 0;
-                         const uchar *codes = diseqc->Codes(n);
-                         if (codes) {
-                            struct dvb_diseqc_master_cmd cmd;
-                            cmd.msg_len = min(n, int(sizeof(cmd.msg)));
-                            memcpy(cmd.msg, codes, cmd.msg_len);
-                            CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_MASTER_CMD, &cmd));
-                            }
-                         }
-                         break;
-                    default: esyslog("ERROR: unknown diseqc command %d", da);
-                    }
-                  }
-              diseqcCommands = diseqc->Commands();
-              }
            }   // LNB sharing
            frequency -= diseqc->Lof();
+           if (diseqc->Commands() && (!diseqcLast || strcmp(diseqcLast->Commands(), diseqc->Commands()) != 0 || diseqc->Unicable())) {
+              ExecuteDiseqc(diseqc, frequency);
+              if (frequency == 0) {
+                 return false;
+                 }
+              diseqcLast = diseqc;
+              }
            }
         else {
            esyslog("ERROR: no DiSEqC parameters found for channel %d", channel.Number());
@@ -685,7 +714,7 @@
           case tsTuned:
                if (Timer.TimedOut()) {
                   tunerStatus = tsSet;
-                  diseqcCommands = NULL;
+                  diseqcLast = NULL;
                   if (time(NULL) - lastTimeoutReport > 60) { // let's not get too many of these
                      isyslog("frontend %d/%d timed out while tuning to channel %d, tp %d", adapter, frontend, channel.Number(), channel.Transponder());
                      lastTimeoutReport = time(NULL);
@@ -695,7 +724,7 @@
           case tsLocked:
                if (Status & FE_REINIT) {
                   tunerStatus = tsSet;
-                  diseqcCommands = NULL;
+                  diseqcLast = NULL;
                   isyslog("frontend %d/%d was reinitialized", adapter, frontend);
                   lastTimeoutReport = 0;
                   continue;
diff -uNr vdr-1.7.19/unicable.conf vdr-1.7.19-patched/unicable.conf
--- vdr-1.7.19/unicable.conf	1970-01-01 01:00:00.000000000 +0100
+++ vdr-1.7.19-patched/unicable.conf	2011-06-20 11:45:34.000000000 +0200
@@ -0,0 +1,19 @@
+# Unicable configuration for VDR
+#
+# Format:
+#
+# channel frequency [pin]
+#
+# channel:        unicable channel (0-7)
+# frequency:      frequency of the unicable channel
+# pin:            optional pin of the unicable channel (0-255)
+#
+# Example:
+#
+# For Inverto Black Unicable LNB:
+
+0 1210
+1 1420
+2 1680
+3 2040
+
diff -uNr vdr-1.7.19/vdr.c vdr-1.7.19-patched/vdr.c
--- vdr-1.7.19/vdr.c	2011-06-20 11:45:14.000000000 +0200
+++ vdr-1.7.19-patched/vdr.c	2011-06-20 11:45:34.000000000 +0200
@@ -607,6 +607,7 @@
   Setup.Load(AddDirectory(ConfigDirectory, "setup.conf"));
   Sources.Load(AddDirectory(ConfigDirectory, "sources.conf"), true, true);
   Diseqcs.Load(AddDirectory(ConfigDirectory, "diseqc.conf"), true, Setup.DiSEqC);
+  Unicables.Load(AddDirectory(ConfigDirectory, "unicable.conf"), true);
   Channels.Load(AddDirectory(ConfigDirectory, "channels.conf"), false, true);
   Timers.Load(AddDirectory(ConfigDirectory, "timers.conf"));
   Commands.Load(AddDirectory(ConfigDirectory, "commands.conf"));
