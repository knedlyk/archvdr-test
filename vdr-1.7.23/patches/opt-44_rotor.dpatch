#! /bin/sh /usr/share/dpatch/dpatch-run
## opt-44_rotor.dpatch by Thomas Bergwinkl <Bergwinkl.Thomas@vr-web.de>
## extracted from the rotor plugin 0.1.4-vdr1.5
## original filename: vdr-1.5.5-rotor.diff
##
## Thomas GÃ¼nther <tom@toms-cafe.de>:
##   - made compatible to VDR-1.4.7
##   - adapted to VDR-1.7.8
##   - adapted to VDR-1.7.11
##   - adapted to VDR-1.7.13
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: This patch is needed for the rotor plugin.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.20~/device.h vdr-1.7.20/device.h
--- vdr-1.7.20~/device.h	2011-08-18 11:41:39.838112845 +0200
+++ vdr-1.7.20/device.h	2011-08-18 11:41:40.568112845 +0200
@@ -24,6 +24,8 @@
 #include "spu.h"
 #include "thread.h"
 #include "tools.h"
+#include <asm/types.h>
+#include <linux/dvb/frontend.h>
 
 #define MAXDEVICES         16 // the maximum number of devices in the system
 #define MAXPIDHANDLES      64 // the maximum number of different PIDs per device
@@ -305,6 +307,7 @@
   virtual bool HasProgramme(void);
          ///< Returns true if the device is currently showing any programme to
          ///< the user, either through replaying or live.
+  virtual bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd) {return false;}
 
 // PID handle facilities
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.20~/dvbdevice.c vdr-1.7.20/dvbdevice.c
--- vdr-1.7.20~/dvbdevice.c	2011-08-18 11:41:10.000000000 +0200
+++ vdr-1.7.20/dvbdevice.c	2011-08-18 11:47:45.878113035 +0200
@@ -258,6 +258,7 @@
 class cDvbTuner : public cThread {
 private:
   enum eTunerStatus { tsIdle, tsSet, tsTuned, tsLocked };
+  bool SendDiseqc;
   int device;
   int fd_frontend;
   int adapter, frontend;
@@ -272,6 +273,7 @@
   cMutex mutex;
   cCondVar locked;
   cCondVar newSet;
+  dvb_diseqc_master_cmd diseqc_cmd;
   void ClearEventQueue(void) const;
   bool GetFrontendStatus(fe_status_t &Status) const;
   bool SetFrontend(void);
@@ -283,6 +285,7 @@
   uint32_t SubsystemId(void) const { return subsystemId; }
   bool IsTunedTo(const cChannel *Channel) const;
   void Set(const cChannel *Channel);
+  bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
   bool Locked(int TimeoutMs = 0);
   int GetSignalStrength(void) const;
   int GetSignalQuality(void) const;
@@ -290,6 +293,7 @@
 
 cDvbTuner::cDvbTuner(int Device, int Fd_Frontend, int Adapter, int Frontend, fe_delivery_system FrontendType)
 {
+  SendDiseqc=false;
   device = Device;
   fd_frontend = Fd_Frontend;
   adapter = Adapter;
@@ -347,6 +351,17 @@
   return tunerStatus >= tsLocked;
 }
 
+bool cDvbTuner::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  cMutexLock MutexLock(&mutex);
+  if ((frontendType != SYS_DVBS && frontendType != SYS_DVBS2) || SendDiseqc)
+    return false;
+  diseqc_cmd=cmd;
+  SendDiseqc=true;
+  newSet.Broadcast();
+  return true;
+}
+
 void cDvbTuner::ClearEventQueue(void) const
 {
   cPoller Poller(fd_frontend);
@@ -647,6 +662,10 @@
         if (GetFrontendStatus(NewStatus))
            Status = NewStatus;
         cMutexLock MutexLock(&mutex);
+        if (SendDiseqc) {
+           CHECK(ioctl(fd_frontend, FE_DISEQC_SEND_MASTER_CMD, &diseqc_cmd));
+           SendDiseqc=false;
+           }
         switch (tunerStatus) {
           case tsIdle:
                break;
@@ -1118,6 +1137,11 @@
   return dvbTuner ? dvbTuner->Locked(TimeoutMs) : false;
 }
 
+bool cDvbDevice::SendDiseqcCmd(dvb_diseqc_master_cmd cmd)
+{
+  return dvbTuner->SendDiseqcCmd(cmd);
+}
+
 void cDvbDevice::SetTransferModeForDolbyDigital(int Mode)
 {
   setTransferModeForDolbyDigital = Mode;
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' vdr-1.7.20~/dvbdevice.h vdr-1.7.20/dvbdevice.h
--- vdr-1.7.20~/dvbdevice.h	2011-08-18 11:41:10.000000000 +0200
+++ vdr-1.7.20/dvbdevice.h	2011-08-18 11:41:40.568112845 +0200
@@ -149,6 +149,7 @@
   virtual bool SetChannelDevice(const cChannel *Channel, bool LiveView);
 public:
   virtual bool HasLock(int TimeoutMs = 0);
+  virtual bool SendDiseqcCmd(dvb_diseqc_master_cmd cmd);
 
 // PID handle facilities
 
