--- vdr-plugin-burn-0.2.0~beta6.orig/chain-archive.c
+++ vdr-plugin-burn-0.2.0~beta6/chain-archive.c
@@ -69,7 +69,7 @@ namespace vdr_burn
 		switch (get_job().get_store_mode()) {
 		case storemode_create:
 			{
-				shellprocess* burn = new shellprocess( "burn", shellescape( "vdrburn-archive.sh" ) + "mkiso" );
+				shellprocess* burn = new shellprocess( "burn", shellescape( VDRBURN_ARCHIVE_CMD ) + "mkiso" );
 				burn->put_environment("ISO_FILE",     get_job().get_iso_path());
 				burn->put_environment("GRAFT_POINTS", graftPoints);
 				burn->put_environment("DISC_ID",      get_job().get_volume_id());
@@ -79,7 +79,7 @@ namespace vdr_burn
 
 		case storemode_burn:
 			{
-				shellprocess *burn = new shellprocess( "burn", shellescape( "vdrburn-archive.sh" ) + "burndir" );
+				shellprocess *burn = new shellprocess( "burn", shellescape( VDRBURN_ARCHIVE_CMD ) + "burndir" );
 				burn->put_environment("DVD_DEVICE",   BurnParameters.DvdDevice);
 				burn->put_environment("GRAFT_POINTS", graftPoints);
 				burn->put_environment("BURN_SPEED",   global_setup().BurnSpeed);
@@ -93,7 +93,7 @@ namespace vdr_burn
 				string fifo = format("{0}/burnfifo") % get_paths().temp;
 				make_fifo(fifo);
 
-				shellprocess* pipe = new shellprocess( "pipe", shellescape( "vdrburn-archive.sh" ) + "pipeiso" );
+				shellprocess* pipe = new shellprocess( "pipe", shellescape( VDRBURN_ARCHIVE_CMD ) + "pipeiso" );
 				pipe->put_environment("CONFIG_PATH",  plugin::get_config_path());
 				pipe->put_environment("GRAFT_POINTS", graftPoints);
 				pipe->put_environment("ISO_FILE",     get_job().get_iso_path());
@@ -101,7 +101,7 @@ namespace vdr_burn
 				pipe->put_environment("DISC_ID",      get_job().get_volume_id());
 				add_process(pipe);
 
-				shellprocess* burn = new shellprocess( "burn", shellescape( "vdrburn-archive.sh" ) + "burniso" );
+				shellprocess* burn = new shellprocess( "burn", shellescape( VDRBURN_ARCHIVE_CMD ) + "burniso" );
 				burn->put_environment("DVD_DEVICE",   BurnParameters.DvdDevice);
 				burn->put_environment("ISO_PIPE",     fifo);
 				burn->put_environment("BURN_SPEED",   global_setup().BurnSpeed);
@@ -114,7 +114,7 @@ namespace vdr_burn
 
 	bool chain_archive::prepare_recording_mark()
 	{
-		shellprocess* recordingmark = new shellprocess( "recordingmark", shellescape( "vdrburn-archive.sh" ) + "recordingmark" );
+		shellprocess* recordingmark = new shellprocess( "recordingmark", shellescape( VDRBURN_ARCHIVE_CMD ) + "recordingmark" );
 		recordingmark->put_environment("RECORDING_PATH", m_current->get_filename());
 		recordingmark->put_environment("CONFIG_PATH", plugin::get_config_path());
 
@@ -124,7 +124,7 @@ namespace vdr_burn
 
 	bool chain_archive::prepare_archive_mark()
 	{
-		shellprocess* archivemark = new shellprocess( "archivemark", shellescape( "vdrburn-archive.sh" ) + "archivemark" );
+		shellprocess* archivemark = new shellprocess( "archivemark", shellescape( VDRBURN_ARCHIVE_CMD ) + "archivemark" );
 		archivemark->put_environment("CONFIG_PATH", plugin::get_config_path());
 
 		add_process(archivemark);
--- vdr-plugin-burn-0.2.0~beta6.orig/common.h
+++ vdr-plugin-burn-0.2.0~beta6/common.h
@@ -18,6 +18,9 @@
 #define JOBNAMELEN 255
 #define MAXATRACKS (MAXAPIDS + MAXDPIDS)
 
+#define VDRBURN_ARCHIVE_CMD "/usr/share/vdr-plugin-burn/vdrburn-archive.sh"
+#define VDRBURN_DVD_CMD     "/usr/share/vdr-plugin-burn/vdrburn-dvd.sh"
+
 class cRecording;
 
 namespace vdr_burn
--- vdr-plugin-burn-0.2.0~beta6.orig/chain-dvd.c
+++ vdr-plugin-burn-0.2.0~beta6/chain-dvd.c
@@ -259,7 +259,7 @@ namespace vdr_burn
 		prepare_demux();
 
 		// start authoring
-		shellprocess* author = new shellprocess( "author", shellescape( "vdrburn-dvd.sh" ) + "author" );
+		shellprocess* author = new shellprocess( "author", shellescape( VDRBURN_DVD_CMD ) + "author" );
 		make_dir(xml.get_author_path());
 		author->put_environment("DVDAUTHOR_XML",  xml.get_xml_path());
 		author->put_environment("DVDAUTHOR_PATH", xml.get_author_path());
@@ -274,7 +274,7 @@ namespace vdr_burn
 		m_pxAudioIndex = 0;
 
 		// processes
-		shellprocess* demux = new shellprocess( "demux", shellescape( "vdrburn-dvd.sh" ) + "demux" );
+		shellprocess* demux = new shellprocess( "demux", shellescape( VDRBURN_DVD_CMD ) + "demux" );
 		demux->put_environment("RECORDING_PATH", m_currentRecording->get_filename());
 		demux->put_environment("IGNORE_TRACKS",  m_currentRecording->get_ignored_cids());
 		demux->put_environment("USED_TRACKS",    m_currentRecording->get_used_cids());
@@ -301,7 +301,7 @@ namespace vdr_burn
 			else
 				requant_call = "lxrequant";
 
-			shellprocess* requant = new shellprocess( "requant", shellescape( "vdrburn-dvd.sh" ) + requant_call );
+			shellprocess* requant = new shellprocess( "requant", shellescape( VDRBURN_DVD_CMD ) + requant_call );
 			requant->put_environment("VIDEO_FILE",     m_currentRecording->get_video_track_path());
 			requant->put_environment("REQUANT_FILE",   m_currentRecording->get_requant_path());
 			requant->put_environment("REQUANT_FACTOR", get_job().get_requant_factor());
@@ -315,7 +315,7 @@ namespace vdr_burn
 		const_track_filter::iterator subtitleTrack = subtitleTracks.begin();
 		while  (subtitleTrack != subtitleTracks.end()) {
 			make_fifo( m_currentRecording->get_subtitle_path(subtitletrack_no) );
-			shellprocess* subtitle = new shellprocess( str ( boost::format( "subtitle%d" ) % subtitletrack_no), shellescape( "vdrburn-dvd.sh" ) + "subtitle" );
+			shellprocess* subtitle = new shellprocess( str ( boost::format( "subtitle%d" ) % subtitletrack_no), shellescape( VDRBURN_DVD_CMD ) + "subtitle" );
 			subtitle->put_environment("NUMBER",         subtitletrack_no);
 			if (subtitleTrack->subtitle.type == track_info::subtitletype_teletext)
 				subtitle->put_environment("TTXTPAGE",       subtitleTrack->subtitle.teletextpage);
@@ -331,7 +331,7 @@ namespace vdr_burn
 			subtitletrack_no++;
 		}
 
-		shellprocess* mplex = new shellprocess( "mplex", shellescape( "vdrburn-dvd.sh" ) + "mplex" );
+		shellprocess* mplex = new shellprocess( "mplex", shellescape( VDRBURN_DVD_CMD ) + "mplex" );
 		mplex->put_environment("MOVIE_FILE",
 				subtitleTracks.begin() != subtitleTracks.end()
 					? m_currentRecording->get_subtitle_path(0)
@@ -407,7 +407,7 @@ namespace vdr_burn
 		switch (get_job().get_store_mode()) {
 		case storemode_create:
 			{
-				shellprocess* burn = new shellprocess( "burn", shellescape( "vdrburn-dvd.sh" ) + "mkiso" );
+				shellprocess* burn = new shellprocess( "burn", shellescape( VDRBURN_DVD_CMD ) + "mkiso" );
 				burn->put_environment("DVDAUTHOR_PATH",
 								  dvdauthor_xml::get_author_path(get_job()));
 				burn->put_environment("ISO_FILE", get_job().get_iso_path());
@@ -418,7 +418,7 @@ namespace vdr_burn
 
 		case storemode_burn:
 			{
-				shellprocess* burn = new shellprocess( "burn", shellescape( "vdrburn-dvd.sh" ) + "burndir" );
+				shellprocess* burn = new shellprocess( "burn", shellescape( VDRBURN_DVD_CMD ) + "burndir" );
 				burn->put_environment("DVDAUTHOR_PATH", dvdauthor_xml::get_author_path(get_job()));
 				burn->put_environment("DVD_DEVICE", BurnParameters.DvdDevice);
 				burn->put_environment("BURN_SPEED", global_setup().BurnSpeed);
@@ -433,14 +433,14 @@ namespace vdr_burn
 				fifofmt % get_paths().temp;
 				make_fifo( fifofmt.str() );
 
-				shellprocess* pipe = new shellprocess( "pipe", shellescape( "vdrburn-dvd.sh" ) + "pipeiso" );
+				shellprocess* pipe = new shellprocess( "pipe", shellescape( VDRBURN_DVD_CMD ) + "pipeiso" );
 				pipe->put_environment("DVDAUTHOR_PATH", dvdauthor_xml::get_author_path(get_job()));
 				pipe->put_environment("ISO_FILE",       get_job().get_iso_path());
 				pipe->put_environment("ISO_PIPE",       fifofmt.str());
 				pipe->put_environment("DISC_ID",        get_job().get_volume_id());
 				add_process(pipe);
 
- 				shellprocess* burn = new shellprocess( "burn", shellescape( "vdrburn-dvd.sh" ) + "burniso" );
+ 				shellprocess* burn = new shellprocess( "burn", shellescape( VDRBURN_DVD_CMD ) + "burniso" );
 				burn->put_environment("DVD_DEVICE", BurnParameters.DvdDevice);
 				burn->put_environment("ISO_PIPE",   fifofmt.str());
 				burn->put_environment("BURN_SPEED", global_setup().BurnSpeed);
@@ -507,7 +507,7 @@ namespace vdr_burn
 #ifdef ENABLE_DMH_ARCHIVE
 	bool chain_dvd::prepare_dmh_archive()
 	{
-		shellprocess* dmharchive = new shellprocess( "dmharchive", shellescape( "vdrburn-dvd.sh" ) + "dmharchive" );
+		shellprocess* dmharchive = new shellprocess( "dmharchive", shellescape( VDRBURN_DVD_CMD ) + "dmharchive" );
 		dmharchive->put_environment("DVDAUTHOR_PATH", dvdauthor_xml::get_author_path(get_job()));
 		dmharchive->put_environment("RECORDING_PATH", m_currentRecording->get_filename());
 		dmharchive->put_environment("TEMP_PATH",  m_currentRecording->get_paths().temp);
@@ -522,7 +522,7 @@ namespace vdr_burn
 
 	bool chain_dvd::prepare_archive_mark()
 	{
-		shellprocess* archivemark = new shellprocess( "archivemark", shellescape( "vdrburn-dvd.sh" ) + "archivemark" );
+		shellprocess* archivemark = new shellprocess( "archivemark", shellescape( VDRBURN_DVD_CMD ) + "archivemark" );
 		archivemark->put_environment("DVDAUTHOR_PATH", dvdauthor_xml::get_author_path(get_job()));
 		archivemark->put_environment("CONFIG_PATH",    plugin::get_config_path());
 
--- vdr-plugin-burn-0.2.0~beta6.orig/render.c
+++ vdr-plugin-burn-0.2.0~beta6/render.c
@@ -101,7 +101,7 @@ namespace vdr_burn
 		config.write( page );
 
 		// TODO: move rendering into chain
-		shellprocess render( "render", shellescape( "vdrburn-dvd.sh" ) + "render" );
+		shellprocess render( "render", shellescape( VDRBURN_DVD_CMD ) + "render" );
 		render.put_environment( "MENU_BACKGROUND", item.get_menu_background( page ) );
 		render.put_environment( "MENU_SOUNDTRACK", plugin::get_config_path() + "/menu-silence.mp2" );
 		render.put_environment( "MENU_XML", config.get_xml_path( page ) );
--- vdr-plugin-burn-0.2.0~beta6.orig/proctools/proctest.cc
+++ vdr-plugin-burn-0.2.0~beta6/proctools/proctest.cc
@@ -94,7 +94,7 @@ bool procchain_dvd::initialize()
 
 	make_dir("data/dvdauthor");
 
-	proc = new shellprocess("author", "vdrburn-dvd.sh author");
+	proc = new shellprocess("author", VDRBURN_DVD_CMD" author");
 	proc->put_environment("DVDAUTHOR_PATH", "data/dvdauthor");
 	add_process(proc);
 
@@ -117,13 +117,13 @@ void procchain_dvd::finished(const proce
 
 void procchain_dvd::prepare_recording()
 {
-	process *proc = new shellprocess("demux", "vdrburn-dvd.sh demux");
+	process *proc = new shellprocess("demux", VDRBURN_DVD_CMD" demux");
 	proc->put_environment("RECORDING_PATH", recs[m_index].path);
 	proc->put_environment("VIDEO_FILE", recs[m_index].video);
 	proc->put_environment("MPEG_PATH", recs[m_index].temp);
 	add_process(proc);
 
-	proc = new shellprocess("mplex", "vdrburn-dvd.sh mplex");
+	proc = new shellprocess("mplex", VDRBURN_DVD_CMD" mplex");
 	proc->put_environment("VIDEO_FILE", recs[m_index].video);
 	proc->put_environment("AUDIO_FILES", recs[m_index].audio);
 	proc->put_environment("MOVIE_FILE", recs[m_index].movie);
